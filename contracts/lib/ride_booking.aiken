use aiken/hash.{Blake2b_224, Hash}
use aiken/list
use aiken/option.{None, Some}
use aiken/string
use aiken/time
use aiken/transaction/credential.{Credential, ScriptCredential, VerifierKeyCredential}
use aiken/transaction/script_context.{ScriptContext, TxInfo}
use aiken/transaction/value.{Value, asset_class_value}
use aiken/transaction.{Address, OutputDatum, TxId, TxOutput}

pub type RideRequest {
  RideRequest {
    rider_address: Address,
    vehicle_nft_policy: Hash<Blake2b_224>,
    vehicle_nft_name: String,
    ride_duration_minutes: Int,
    ride_fare_lovelace: Int,
    request_timestamp: Int,
  }
}

pub type RideCompletion {
  RideCompletion {
    ride_request: RideRequest,
    completion_timestamp: Int,
    actual_fare_lovelace: Int,
    driver_address: Address,
  }
}

pub const PLATFORM_FEE_PERCENTAGE: Int = 5
pub const MINIMUM_RIDE_FARE: Int = 1000000

pub const STABLECOIN_POLICY_ID: ByteArray = "<DJED_POLICY_ID>"
pub const STABLECOIN_ASSET_NAME: ByteArray = "DJED"

fn stablecoin(value: Value) -> Int {
  asset_class_value(value, STABLECOIN_POLICY_ID, STABLECOIN_ASSET_NAME)
}

pub fn ride_booking_validator(
  ride_request: RideRequest,
  redeemer: RideCompletion,
  context: ScriptContext,
) -> Bool {
  let ScriptContext { transaction, .. } = context
  let TxInfo { inputs, outputs, .. } = transaction
  validate_ride_completion(ride_request, redeemer, inputs, outputs)
}

fn validate_ride_completion(
  request: RideRequest,
  completion: RideCompletion,
  inputs: List<TxInput>,
  outputs: List<TxOutput>,
) -> Bool {
  if completion.ride_request != request {
    False
  } else {
    let platform_payment = completion.actual_fare_lovelace
    verify_platform_payment(platform_payment, outputs)
  }
}

fn verify_platform_payment(
  platform_payment: Int,
  outputs: List<TxOutput>,
) -> Bool {
  let platform_wallet_address = <PLATFORM_WALLET_ADDRESS>
  list.any(outputs, fn(output: TxOutput) {
    output.address == platform_wallet_address &&
    stablecoin(output.value) >= platform_payment
  })
}

pub fn create_ride_request(
  rider_address: Address,
  vehicle_nft_policy: Hash<Blake2b_224>,
  vehicle_nft_name: String,
  ride_duration_minutes: Int,
  ride_fare_lovelace: Int,
) -> RideRequest {
  RideRequest {
    rider_address,
    vehicle_nft_policy,
    vehicle_nft_name,
    ride_duration_minutes,
    ride_fare_lovelace,
    request_timestamp: time.now(),
  }
}

pub fn complete_ride(
  ride_request: RideRequest,
  actual_fare_lovelace: Int,
  driver_address: Address,
) -> RideCompletion {
  RideCompletion {
    ride_request,
    completion_timestamp: time.now(),
    actual_fare_lovelace,
    driver_address,
  }
} 