use aiken/hash.{Blake2b_224, Hash}
use aiken/list
use aiken/option.{None, Some}
use aiken/string
use aiken/time
use aiken/transaction/credential.{Credential, ScriptCredential, VerifierKeyCredential}
use aiken/transaction/script_context.{ScriptContext, TxInfo}
use aiken/transaction/value.{Value, asset_class_value}
use aiken/transaction.{Address, OutputDatum, TxId, TxOutput}

use ./ride_booking.{RideRequest, RideCompletion, ride_booking_validator}

pub type VehicleMintingPolicy {
  VehicleMintingPolicy {
    platform_wallet: Address,
    vehicle_make: String,
    vehicle_model: String,
    vehicle_year: Int,
    vehicle_vin: String,
    estimated_value_stablecoin: Int,
    share_price_stablecoin: Int,
    total_shares: Int,
  }
}

pub fn vehicle_minting_validator(
  policy: VehicleMintingPolicy,
  redeemer: String,
  context: ScriptContext,
) -> Bool {
  let ScriptContext { transaction, .. } = context
  let TxInfo { inputs, outputs, .. } = transaction
  validate_platform_wallet(policy.platform_wallet, inputs, outputs) &&
  validate_redeemer(redeemer) &&
  validate_minting_transaction(policy, outputs)
}

fn validate_platform_wallet(
  platform_wallet: Address,
  inputs: List<TxInput>,
  outputs: List<TxOutput>,
) -> Bool {
  list.any(inputs, fn(input: TxInput) {
    input.address == platform_wallet
  })
}

fn validate_redeemer(redeemer: String) -> Bool {
  string.length(redeemer) > 0
}

fn validate_minting_transaction(
  policy: VehicleMintingPolicy,
  outputs: List<TxOutput>,
) -> Bool {
  list.any(outputs, fn(output: TxOutput) {
    output.address == policy.platform_wallet
  })
}

pub fn ryde_ride_validator(
  ride_request: RideRequest,
  redeemer: RideCompletion,
  context: ScriptContext,
) -> Bool {
  ride_booking_validator(ride_request, redeemer, context)
}

pub fn create_vehicle_policy(
  platform_wallet: Address,
  vehicle_make: String,
  vehicle_model: String,
  vehicle_year: Int,
  vehicle_vin: String,
  estimated_value_stablecoin: Int,
  share_price_stablecoin: Int,
  total_shares: Int,
) -> VehicleMintingPolicy {
  VehicleMintingPolicy {
    platform_wallet,
    vehicle_make,
    vehicle_model,
    vehicle_year,
    vehicle_vin,
    estimated_value_stablecoin,
    share_price_stablecoin,
    total_shares,
  }
}

pub fn is_vehicle_owner(
  vehicle_nft_policy: Hash<Blake2b_224>,
  vehicle_nft_name: String,
  address: Address,
  outputs: List<TxOutput>,
) -> Bool {
  list.any(outputs, fn(output: TxOutput) {
    output.address == address &&
    value.ada(output.value) > 0
  })
} 